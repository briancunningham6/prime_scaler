name: Elixir CI/CD Release Pipeline
on:
  push:
    branches: [ prod ]
  pull_request:
    branches: [ prod ]
jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    env:
      MIX_ENV: prod
      
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.15.4' # Update to match your project's Elixir version
        otp-version: '26.0'      # Update to match your project's OTP version
    
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Check formatting
      run: mix format --check-formatted
      
    - name: Run static code analysis
      run: |
        mix deps.get --only dev
        mix credo
        
    - name: Compile
      run: mix compile --warnings-as-errors
      
    - name: Run tests
      run: |
        MIX_ENV=test mix test
        
    - name: Install frontend dependencies
      run: |
        cd assets
        npm ci
        
    - name: Build assets
      run: |
        mix assets.deploy
        
    - name: Create release
      run: |
        mix phx.gen.release
        mix release --overwrite
        
    - name: Package release
      run: |
        mkdir -p releases
        VERSION=$(grep 'version:' mix.exs | sed -E 's/.*version: "([^"]+)".*/\1/')
        RELEASE_NAME="prime_scaler-${VERSION}.zip"
        zip -r "releases/${RELEASE_NAME}" _build/prod/rel/prime_scaler
        echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV
        echo "RELEASE_VERSION=${VERSION}" >> $GITHUB_ENV
        
    - name: Upload release as artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-build
        path: releases/*.zip
        retention-days: 5
        
  create-github-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/prod'
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: release-build
        path: releases
        
    - name: List files
      run: ls -la releases
      
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.RELEASE_VERSION || github.run_number }}
        name: Release v${{ needs.build.outputs.RELEASE_VERSION || github.run_number }}
        draft: false
        prerelease: false
        files: releases/*.zip
