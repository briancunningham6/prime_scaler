name: Elixir Multi-Platform Build
on:
  push:
    branches: [ prod ]
  pull_request:
    branches: [ prod ]
jobs:
  # Raspberry Pi 5 build (using Docker and QEMU for cross-compilation)
  build-rpi5:
    name: Build for Raspberry Pi 5
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Generate secret key base
      run: |
        # Install Elixir temporarily to generate a secret
        sudo apt-get update
        sudo apt-get install -y elixir
        SECRET_KEY=$(elixir -e "IO.puts :crypto.strong_rand_bytes(64) |> Base.encode64 |> binary_part(0, 64)")
        echo "SECRET_KEY_BASE=${SECRET_KEY}" >> $GITHUB_ENV
      
    - name: Build for Raspberry Pi 5
      run: |
        # Create Docker build context
        mkdir -p docker-build
        
        # Copy required files for build (not the entire directory)
        cp -r assets docker-build/
        cp -r config docker-build/
        cp -r lib docker-build/
        cp -r priv docker-build/
        cp mix.exs mix.lock docker-build/
        
        # Create Dockerfile for Raspberry Pi 5 build
        cat > docker-build/Dockerfile << EOF
        FROM arm64v8/debian:bullseye
        
        # Install build dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            git \
            nodejs \
            npm \
            wget \
            curl \
            unzip
        
        # Install Erlang repository
        RUN apt-get update && apt-get install -y wget
        RUN wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb
        RUN dpkg -i erlang-solutions_2.0_all.deb
        
        # Install Erlang and Elixir
        RUN apt-get update && apt-get install -y \
            erlang \
            elixir
        
        # Create app directory
        WORKDIR /app
        
        # Copy application files
        COPY . .
        
        # Set SECRET_KEY_BASE environment variable
        ENV SECRET_KEY_BASE=${SECRET_KEY_BASE}
        ENV MIX_ENV=prod
        
        # Get dependencies
        RUN mix local.hex --force
        RUN mix local.rebar --force
        RUN mix deps.get --only prod
        
        # Build assets
        RUN cd assets && npm install && cd ..
        RUN mix assets.deploy
        
        # Build release
        RUN mix release
        EOF
        
        # Build the Docker image using QEMU
        cd docker-build
        docker buildx build --platform linux/arm64/v8 -t prime_scaler_rpi5_builder .
        
        # Extract the release
        docker create --name temp_container prime_scaler_rpi5_builder
        mkdir -p ../releases
        docker cp temp_container:/app/_build/prod/rel/prime_scaler ../releases/prime_scaler_rpi5
        docker rm temp_container
        
        # Package the release
        VERSION=$(grep 'version:' mix.exs | sed -E 's/.*version: "([^"]+)".*/\1/')
        cd ../releases
        zip -r "prime_scaler-${VERSION}-raspberry-pi-5.zip" prime_scaler_rpi5
      
    - name: Upload Raspberry Pi 5 release
      uses: actions/upload-artifact@v4
      with:
        name: release-rpi5
        path: releases/prime_scaler-*-raspberry-pi-5.zip
        retention-days: 5
  # Create GitHub Release with all platform builds
  create-release:
    name: Create GitHub Release
    needs: [build-rpi5]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/prod'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Get version
      id: get_version
      run: |
        VERSION=$(grep 'version:' mix.exs | sed -E 's/.*version: "([^"]+)".*/\1/')
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        
    - name: Download Raspberry Pi 5 artifact
      uses: actions/download-artifact@v4
      with:
        name: release-rpi5
        path: releases
        
    - name: List files
      run: ls -la releases
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        name: Release v${{ steps.get_version.outputs.VERSION }}
        body: |
          PrimeScaler Release v${{ steps.get_version.outputs.VERSION }}
          
          ## Available Builds:
          
          - **macOS (ARM64)**: For Apple Silicon Macs (M1, M2, etc.)
          - **Raspberry Pi 5**: For Raspberry Pi 5 (64-bit OS)
          
          ## Installation Instructions:
          
          1. Download the appropriate zip file for your system
          2. Unzip the file: `unzip prime_scaler-*.zip`
          3. Run the application: `./prime_scaler/bin/prime_scaler start`
          
          For detailed installation and configuration instructions, see the README.
        draft: false
        prerelease: false
        files: releases/*.zip